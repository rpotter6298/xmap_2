install.packages("enrichR")
setwd("X:/PhD/01_xmap_autoimmune_profiling/01_code/xmap_biomarkers")
dataset <- "GLA02"
controls <- c("Anti-human IgG", "EBNA1", "Bare-bead", "His6ABP")
for (file in list.files(file.path("scripts", "backend"))) {
print(file)
source(file.path("scripts", "backend", file))
}
source(file.path("scripts", "importer.R"))
install.packages('ggbreak')
controls <- c("Anti-human IgG", "EBNA1", "Bare-bead", "His6ABP")
for (file in list.files(file.path("scripts", "backend"))) {
print(file)
source(file.path("scripts", "backend", file))
}
source(file.path("scripts", "importer.R"))
### Pipeline
import(dataset)
stage_1(I01_Import, "P01_Preprocessed")
stage_2(P01_Preprocessed, "P02_Merged")
stage_3(P02_Merged, "P03_Transformed")
anti_names <- row.names((report))
# export_excel(P03_Transformed)
# Report with good names
report <- reports_P03_Transformed_bcrsn$Set_3_limma
anti_names <- row.names((report))
gene_names <- unname(replace_antigen_names(anti_names))
report["Gene_Names"] <- gene_names
# OTHER
#pp_box_plot_multi(limma_subset(P03_Transformed$Set_3), "Limma_Subset")
untrans <- untransform_subset(P03_Transformed$Set_3, P02_Merged$Set_3, subset_method = limma_subset, P = 0.05, mode = "default")
View(untrans)
View(report)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("fgsea")
P03_Transformed$Set_3
View(reports_P03_Transformed_bcrsn)
head(reports_P03_Transformed_bcrsn$Set_3_limma)
limma_results <- reports_P03_Transformed_bcrsn$Set_3_limma
# Assuming 'limma_results' is your data frame from the limma output
# Calculate pi-value and add it as a new column to the dataframe
limma_results$pi_value <- with(limma_results, -log10(P.Value) * logFC)
limma_results
limma_results_sorted <- limma_results[order(-limma_results$pi_value), ]
limma_results_sorted
library(fgsea)
H <- as.data.frame(msigdbr(species = "Homo sapiens",
category = "H"))
H.ensembl.ls <- H %>%
#Keep gene ID that match expression data gene ID
select(gs_name, ensembl_gene) %>%
#Collapse all genes in each gene set into 1 row each
group_by(gs_name) %>%
summarise(all.genes = list(unique(ensembl_gene))) %>%
#Convert to list
deframe()
H <- as.data.frame(msigdbr(species = "Homo sapiens",
category = "H"))
H.ensembl.ls <- H %>%
#Keep gene ID that match expression data gene ID
select(gs_name, ensembl_gene) %>%
#Collapse all genes in each gene set into 1 row each
group_by(gs_name) %>%
summarise(all.genes = list(unique(ensembl_gene))) %>%
#Convert to list
deframe()
H.ensembl.ls
limma_results
report
anti_names <- row.names((limma_results_sorted))
gene_names <- unname(replace_antigen_names(anti_names))
limma_results_sorted["Gene_Names"] <- gene_names
limma_results_sorted
limma_results_sorted["Gene"] <- gene_names
limma_results_sorted
# Assuming 'limma_results_sorted' is your sorted data frame and 'Gene' is the column with gene names
ranked_genes <- limma_results_sorted$pi_value
ranked_genes
names(ranked_genes) <- limma_results_sorted$Gene
ranked_genes
fgsea_results <- fgsea(pathways = H.ensembl.ls, stats = ranked_genes, minSize = 15, maxSize = 500, nperm = 1000)
View(fgsea_results)
# Run fgseaMultilevel
fgsea_results <- fgsea(pathways = H.ensembl.ls, stats = ranked_genes, minSize = 15, maxSize = 500)
View(fgsea_results)
# Ensure ranked_genes does not have duplicates
ranked_genes <- ranked_genes[!duplicated(names(ranked_genes))]
# Run fgseaMultilevel
fgsea_results <- fgsea(pathways = H.ensembl.ls, stats = ranked_genes, minSize = 15, maxSize = 500)
View(fgsea_results)
ranked_genes
limma_results_expanded <- limma_results_sorted %>%
separate_rows(Gene, sep = ",") %>%
mutate(Gene = trimws(Gene))  # Remove any whitespace
View(limma_results_expanded)
# Assuming 'limma_results_sorted' is your sorted data frame and 'Gene' is the column with gene names
ranked_genes <- limma_results_expanded$pi_value
names(ranked_genes) <- limma_results_sorted$Gene
# Ensure ranked_genes does not have duplicates
ranked_genes <- ranked_genes[!duplicated(names(ranked_genes))]
ranked_genes
# Assuming 'limma_results_sorted' is your sorted data frame and 'Gene' is the column with gene names
ranked_genes <- limma_results_expanded$pi_value
names(ranked_genes) <- limma_results_expanded$Gene
# Ensure ranked_genes does not have duplicates
ranked_genes <- ranked_genes[!duplicated(names(ranked_genes))]
ranked_genes
fgsea_results <- fgsea(pathways = H.ensembl.ls, stats = ranked_genes, minSize = 15, maxSize = 500, nperm = 1000)
# Run fgseaMultilevel
fgsea_results <- fgsea(pathways = H.ensembl.ls, stats = ranked_genes, minSize = 15, maxSize = 500)
limma_results_expanded$pi_value <- limma_results_expanded$pi_value + runif(nrow(limma_results_sorted), min=-1e-10, max=1e-10)
limma_results_expanded$pi_value <- limma_results_expanded$pi_value + runif(nrow(limma_results_expanded), min=-1e-10, max=1e-10)
ranked_genes <- limma_results_expanded$pi_value
names(ranked_genes) <- limma_results_expanded$Gene
# Ensure ranked_genes does not have duplicates
ranked_genes <- ranked_genes[!duplicated(names(ranked_genes))]
# Run fgseaMultilevel
fgsea_results <- fgsea(pathways = H.ensembl.ls, stats = ranked_genes, minSize = 15, maxSize = 500)
View(fgsea_results)
H.ensembl.ls
View(I00_Antigens)
View(replace_antigen_names)
gene_names <- unname(replace_antigen_names(anti_names, replacement_col = "ENSG.ID"))
gene_names
limma_results_sorted["Gene"] <- gene_names
limma_results_expanded <- limma_results_sorted %>%
separate_rows(Gene, sep = ",") %>%
mutate(Gene = trimws(Gene))  # Remove any whitespace
limma_results_expanded$pi_value <- limma_results_expanded$pi_value + runif(nrow(limma_results_expanded), min=-1e-10, max=1e-10)
ranked_genes <- limma_results_expanded$pi_value
names(ranked_genes) <- limma_results_expanded$Gene
ranked_genes
# Ensure ranked_genes does not have duplicates
ranked_genes <- ranked_genes[!duplicated(names(ranked_genes))]
# Run fgseaMultilevel
fgsea_results <- fgsea(pathways = H.ensembl.ls, stats = ranked_genes, minSize = 15, maxSize = 500)
H.ensembl.ls
ranked_genes
# Run fgseaMultilevel
head(H.ensembl.ls)
# Run fgseaMultilevel
head(H.ensembl.ls)
head(ranked_genes)
fgsea_results <- fgsea(pathways = H.ensembl.ls, stats = ranked_genes, minSize = 15, maxSize = 500)
head(fgsea_results)
overlap_counts <- sapply(H.ensembl.ls, function(gs) sum(gs %in% names(ranked_genes)))
sum(overlap_counts > 0)
ranked_genes
anti_names
limma_results_sorted <- limma_results[order(limma_results$pi_value), ]
anti_names <- row.names((limma_results_sorted))
gene_names <- unname(replace_antigen_names(anti_names, replacement_col = "ENSG.ID"))
limma_results_sorted["Gene"] <- gene_names
limma_results_expanded <- limma_results_sorted %>%
separate_rows(Gene, sep = ",") %>%
mutate(Gene = trimws(Gene))  # Remove any whitespace
limma_results_expanded$pi_value <- limma_results_expanded$pi_value + runif(nrow(limma_results_expanded), min=-1e-10, max=1e-10)
ranked_genes <- limma_results_expanded$pi_value
ranked_genes
names(ranked_genes) <- limma_results_expanded$Gene
# Ensure ranked_genes does not have duplicates
ranked_genes <- ranked_genes[!duplicated(names(ranked_genes))]
fgsea_results <- fgsea(pathways = H.ensembl.ls, stats = ranked_genes, minSize = 15, maxSize = 500)
head(fgsea_results)
overlap_counts <- sapply(H.ensembl.ls, function(gs) sum(gs %in% names(ranked_genes)))
sum(overlap_counts > 0)
fgsea_results <- fgsea(pathways = H.ensembl.ls, stats = ranked_genes)
View(fgsea_results)
limma_results_sorted <- limma_results[order(-limma_results$pi_value), ]
anti_names <- row.names((limma_results_sorted))
gene_names <- unname(replace_antigen_names(anti_names, replacement_col = "ENSG.ID"))
limma_results_sorted["Gene"] <- gene_names
limma_results_expanded <- limma_results_sorted %>%
separate_rows(Gene, sep = ",") %>%
mutate(Gene = trimws(Gene))  # Remove any whitespace
limma_results_expanded$pi_value <- limma_results_expanded$pi_value + runif(nrow(limma_results_expanded), min=-1e-10, max=1e-10)
ranked_genes <- limma_results_expanded$pi_value
names(ranked_genes) <- limma_results_expanded$Gene
# Ensure ranked_genes does not have duplicates
ranked_genes <- ranked_genes[!duplicated(names(ranked_genes))]
fgsea_results <- fgsea(pathways = H.ensembl.ls, stats = ranked_genes)
View(fgsea_results)
